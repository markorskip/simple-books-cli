event: setBusinessName, date: 1/1/2022, businessName: "Efficient Software LLC"
event: addVehicle, date, 1/1/2022, vehicleName: Chevy
event: logMileage, vehicleName: Chevy, date: 5/4/2023, distance: 50, description: trip for supplies
event: addAutoExpense, vehicleName: Chevy, date: 5/10/2023, amount: 50, category: tires
event:



facts:
business-facts:
businessName: EfficientSoftwareLLC
ownerName: Skip Sorenson

auto-facts:
vehicleName:



Event definitions:
Business
    setBusinessName
    setOwnerName

Vehicle
    addVehicle:
        vehicleName
    logMileage:
        vehicleName, date, distance, description
    addAutoExpense:
        vehicleName, date, amount, category
    logOdometer
        vehicleName, date, odometerReading

TimeKeeping
    addContract:
        contractName, hourlyRate, date (if you want to change the rate, add Contract again with higher rate)
    logTime:
        contractName, timeWorked, date, description




Really I'm creating a language for describing a business.

The events that occurred, reconstructed form the business model in it's current state.

New events change the business model (for better or worse)

The user loads all the events that are occurred.
The program generates the model.
Artificats can now be generated based on the current state of the business.
Invoices can be created based on what happened.
Expense reports can be created.
Etc... etc....

So creating a language to describe the event that happened and some way to incdicate the ordering.


for example we could order by a list in a file, but it we have multiple files, which go first?
That doesnt work

If we give everything a date we can order by that - but what about when the date doesn't matter? Such as setting the business name? Not everything needs a date.

date events - the date matters such as a financial transaction

facts - business information, invoice template data, miles at beginning of year and end of year, these are facts


BusinessModel business = createBusinessModel(EventsThatTookPlace, FactsAboutTheBusiness);

business.createExpenseReport(taxyear: 2022);
business.createInvoice(month: May, contractName: "Shotspotter", template: ShotspotterTemplate, invoiceNo: 10);
business.createAutoReport(tax year: 2022);


eventThatTookPlace all have a date. the need to be executed in order.

FactsAboutTheBusiness are all upfront - such as setting up the business name, it's contracts.

If a contract changes pay rate, create a new contract, don't modify the existing ones.

So really the user needs to records events - such as mileage log, financial transactions, and timekeeping logs
as well as facts such as vehicle_facts, contract_facts,

so your bootrap program does the following:
find every file in a directly that applies to the program
decide if the file is facts or events
for event files - line by line create events
for fact files - line by line interpret facts and create/modify objects



Facts:
 Business:
    Business Information:
        BusinessName: Efficient Software LLC
        EIN: Ein Number

    Timekeeping:
        ContractName: Shotspotter LLC
        HourlyRate: 85
        Invoice Template:
            Attn:
                Name: Smita Nair
                Title: Engineering Manager, SVP

TimeKeepingLog
ContractName,
